mclx
gsub("(.+)[_f]", "\\1", "abc_f", perl = TRUE)
gsub("(.+)[(_f)]", "\\1", "abc_f", perl = TRUE)
gsub("(.+)_f$", "\\1", "abc_f", perl = TRUE)
gsub("(.+)_f$", "\\1", "abc", perl = TRUE)
data = mtcars; descvars = c("disp", "hp", "drat", "wt", "mpg"); focalcat = "gear"; refcat = "cyl"; byvars = "vs"; id = "model"
if ("data.table" %in% class(data)){
dt <- data
} else {
dt <- data.table(data, key = paste(focalcat, refcat, byvars, sep = ","))
}
library("data.table")
library("magrittr")
library("pastecs")
library("reshape2")
if ("data.table" %in% class(data)){
dt <- data
} else {
dt <- data.table(data, key = paste(focalcat, refcat, byvars, sep = ","))
}
bf  <- paste(byvars, focalcat,          sep = ",")
bfr <- paste(byvars, focalcat, refcat, sep = ",")
br  <- paste(byvars,            refcat, sep = ",")
bfr_plus <- paste(c(byvars, focalcat, refcat), collapse = " + ")
dv_plus  <- paste(descvars, collapse = " + ")
ns_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
]
ns_bfrv
print(ns_bfrv)
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
] %>%
melt(id.vars = c(byvars, focalcat, refcat))
n_bfrv
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
] %>%
melt(id.vars = c(byvars, focalcat, refcat)) %>%
within({
descvar <- gsub("(.+)_f$]", "\\1", variable, perl = TRUE)
nfocflag   <- grepl("_f$", variable)
ndesc <- ifelse(nfocflag, "n_bf", "n_bfr")
rm(variable, nfocflag)
})
n_bfrv
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
] %>%
melt(id.vars = c(byvars, focalcat, refcat)) %>%
within({
descvar <- gsub("_f$", "", variable)
nfocflag   <- grepl("_f$", variable)
ndesc <- ifelse(nfocflag, "n_bf", "n_bfr")
rm(variable, nfocflag)
})
n_bfrv
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
] %>%
melt(id.vars = c(byvars, focalcat, refcat)) %>%
within({
descvar <- gsub("_f$", "", variable)
nfocflag   <- grepl("_f$", variable)
ndesc <- ifelse(nfocflag, "n_bf", "n_bfr")
rm(variable, nfocflag)
}) %>%
dcast(as.formula(paste0(bfr_plus, " + descvar ~ ndesc")),
value.var = "value")
n_bfrv
library(data.table)
?fread
?quantile
source('~/GitHub/tcbTools/R/sample-data-gen.R', echo=TRUE)
dim(youthdata)
dim(data)
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = sample(1:10, 24, replace = TRUE),
by.var = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data <- data[order(data$ref.cat),]
# attach(data)
# desc.vars <- "val"
# ref.cat <- "ref.cat"
# by.vars <- "by.var"
# id <- "id"
dim(data)
data
data <- data[order(data$school),]
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data <- data[order(data$school),]
# attach(data)
# desc.vars <- "val"
# ref.cat <- "ref.cat"
# by.vars <- "by.var"
# id <- "id"
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = 1:24, #sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
value1 = 1:24,
value2 = sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data
n <- 24
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
data
set.seed(60637)
n <- 24
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
data$value1[runif(n) < 0.1] <- NA
data$value2[runif(n) < 0.1] <- NA
set.seed(60637)
n <- 24
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Prog C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
# Add in missings
data$value1[runif(n) < 0.1] <- NA
data$value2[runif(n) < 0.1] <- NA
# Add in duplicate youth
dup <- data[c(1, 10, 20),]
dup$program <- "Prog D"
data <- rbind(data,dup)
data
### Generate data to demonstrate peerstats function ----------------------------
set.seed(60637)
n <- 24
peerdata <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Prog C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
# Add in missings
peerdata$value1[runif(n) < 0.1] <- NA
peerdata$value2[runif(n) < 0.1] <- NA
# Add in duplicate youth
dup <- peerdata[c(1, 10, 20),]
dup$program <- "Prog D"
peerdata <- rbind(peerdata,dup)
peerdata <- peerdata[order(peerdata$school),]
peerdata
### Generate data to demonstrate peerstats function ----------------------------
set.seed(60637)
n <- 24
peerdata <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Prog C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
# Add in missings
peerdata$value1[runif(n) < 0.1] <- NA
peerdata$value2[runif(n) < 0.1] <- NA
peerdata
dup <- peerdata[c(1, 10, 20),]
dup$program <- "Prog D"
peerdata <- rbind(peerdata,dup)
peerdata
peerdata <- peerdata[order(peerdata$school),]
peerdata
colnames(peerdata)
data = peerdata; descvars = c("value1", "value2"); focalcat = "program"; refcat = "school"; byvars = "flavor"; id = "id"
if ("data.table" %in% class(data)){
dt <- data
} else {
dt <- data.table(data, key = paste(focalcat, refcat, byvars, sep = ","))
}
library("data.table")
library("magrittr")
library("pastecs")
library("reshape2")
if ("data.table" %in% class(data)){
dt <- data
} else {
dt <- data.table(data, key = paste(focalcat, refcat, byvars, sep = ","))
}
head(dt)
bf  <- paste(byvars, focalcat,         sep = ",")
bfr <- paste(byvars, focalcat, refcat, sep = ",")
br  <- paste(byvars,           refcat, sep = ",")
bfr_plus <- paste(c(byvars, focalcat, refcat), collapse = " + ")
dv_plus  <- paste(descvars, collapse = " + ")
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars]
n_bfrv
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
]
n_bfrv
n_bfrv
colSums(n_bfrv)
colSums(n_bfrv$value1)
str(n_bfrv)
sum(n_bfrv$value1)
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
] %>%
melt(id.vars = c(byvars, focalcat, refcat)) %>%
within({
descvar <- gsub("_f$", "", variable)
nfocflag   <- grepl("_f$", variable)
ndesc <- ifelse(nfocflag, "n_bf", "n_bfr")
rm(variable, nfocflag)
}) %>%
dcast(as.formula(paste0(bfr_plus, " + descvar ~ ndesc")),
value.var = "value")
n_bfrv
library(data.table)
n <- 1e8
dt_n1e8 <- data.table(clef   = sample(c("treble", "bass"), size = n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sweet"), size = n, replace = TRUE),
value = rnorm(n))
dtk_n1e8 <- setkey(dt_n1e8, "clef", "flavor")
system.time( dt_n1e8[, mean(value)])
system.time( dt_n1e8[, mean(value), by = "clef"])
system.time( dt_n1e8[, mean(value), by = "clef,flavor"])
system.time(dtk_n1e8[, mean(value), by = "clef,flavor"])
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
dt <- dt_n1e8[sample(1:n, size = size)]
runtime <- system.time(for (b in 1:10) (dt[, mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(runtime ~ size + I(size^2), data = runtimes_byn)
?I
lm(time ~ size + I(size^2), data = runtimes_byn)
rm(list = ls())
gc()
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
runtime <- system.time((dt[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
runtimes_byn
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
runtime <- system.time((dtk_n1e8[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
library(data.table)
# Set up data sets
n <- 1e8
dt_n1e8 <- data.table(clef   = sample(c("treble", "bass"), size = n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sweet"), size = n, replace = TRUE),
value = rnorm(n))
dtk_n1e8 <- setkey(dt_n1e8, "clef", "flavor")
# Compare run time by # of bys, and setkey
system.time( dt_n1e8[, mean(value)])
system.time( dt_n1e8[, mean(value), by = "clef"])
system.time( dt_n1e8[, mean(value), by = "clef,flavor"])
system.time(dtk_n1e8[, mean(value), by = "clef,flavor"])
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
runtime <- system.time((dtk_n1e8[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
runtimes_byn
library(data.table)
# Set up data sets
n <- 1e7
dt_n1e7 <- data.table(clef   = sample(c("treble", "bass"), size = n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sweet"), size = n, replace = TRUE),
value = rnorm(n))
dtk_n1e7 <- setkey(dt_n1e7, "clef", "flavor")
# Compare run time by # of bys, and setkey
system.time( dt_n1e7[, mean(value)])
system.time( dt_n1e7[, mean(value), by = "clef"])
system.time( dt_n1e7[, mean(value), by = "clef,flavor"])
system.time(dtk_n1e7[, mean(value), by = "clef,flavor"])
# Compare run times by n
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e7)){
print(paste("Running loop for size", size))
runtime <- system.time(for (b in 1:100) (dtk_n1e7[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
getwd()
library(leaflet)
library(readxl)
floor(1.6)
floor(1.2)
floor(2.2)
floor(2.6)
2_2
1+1
??readOGR
# Chunk 1: setup
knitr::opts_chunk$set(echo = TRUE, fig.width = 5, fig.height = 3, warning = FALSE, message = FALSE, error = FALSE) # root.dir = "~/GitHub/leaflet-trainr/" ... currently not sure how to reliably get Knitr to respect this identification of root.directory. See https://github.com/yihui/knitr/issues/277
library(leaflet)
library(rgdal)
library(readxl)
library(RColorBrewer)
library(shiny)
library(foreign)
# Chunk 2: first_map
m <- leaflet() %>%
addTiles() %>%  # Add default OpenStreetMap map tiles
addMarkers(lng=-87.5947675, lat=41.7858686, popup="Chapin Hall")
m
# Chunk 3: first_map_newBase
m %>% addProviderTiles("CartoDB.Positron")
# Chunk 4: map_schools
# Download and prep CPS report card data
schools <- read.csv("https://data.cityofchicago.org/api/views/2m8w-izji/rows.csv",
stringsAsFactors = FALSE) %>%
within({
temp <- Latitude
Latitude <- Longitude
Longitude <- temp
PolicyLevel <- factor(CPS.Performance.Policy.Level)
rm(temp)
}) # ...because these are accidentally backwards
# Download and merge an Excel file with enrollment data
download.file(url = "http://cps.edu/Performance/Documents/Datafiles/enrollment_20th_day_2014.xls",
destfile = "sch_enrollment_xls.xls", method = "curl")
sch_enrollment <- read_excel("sch_enrollment_xls.xls")
sch_merge <- merge(x = schools,
y = sch_enrollment,
by.x = "School.ID",
by.y = "School ID")
# Generate the map
leaflet(sch_merge) %>% addTiles() %>%
addMarkers(lng = ~Longitude, lat = ~Latitude, popup = ~Name.of.School)
# Chunk 5: map_symbology
# Picking out a color palette
palette <- colorFactor(palette = "Set1",
domain = sch_merge$PolicyLevel)
# Changing our display from markers to circles, and adding the formatting information we want, about color, radius, outline, and opacity
sch_map_withFormats <- leaflet(sch_merge) %>% addProviderTiles("CartoDB.Positron") %>%
addCircles(lng = ~Longitude, lat = ~Latitude, popup = ~Name.of.School,
color = ~palette(PolicyLevel), radius = ~Totals/3, stroke = FALSE,
opacity = 0.8, fillOpacity = 0.8)
sch_map_withFormats
# Chunk 6: map_legend
# Using the map that we just created, but adding a legend, giving it the information on colors, values, and title that we want.
sch_map_addedLegend <-
sch_map_withFormats %>%
addLegend(position = "bottomright", pal = palette, values = ~PolicyLevel,
title = "CPS School Policy Levels")
sch_map_addedLegend
# Chunk 7: map_detailedPopup
detailedPopUp <- with(sch_merge, paste(sep = "<br/>",
paste0("<b>", Name.of.School, "</b> (<a href='", Website,"'>web</a>)"),
paste0(Street.Address, " ", City, ", ", State, " " , ZIP.Code),
paste0("Network: ", Network),
paste0("Policy Level: ", PolicyLevel)))
map_wPops <- leaflet(sch_merge) %>% addProviderTiles("CartoDB.Positron") %>%
addCircles(lng = ~Longitude, lat = ~Latitude, popup = ~detailedPopUp,
color = ~palette(PolicyLevel), radius = ~Totals/3, stroke = FALSE,
opacity = 0.8, fillOpacity = 0.8)
map_wPops
chiTracts <- readOGR(dsn = "../data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8",
verbose = FALSE)
chiTracts <- spTransform(chiTracts, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
library(rgdal)
chiTracts <- readOGR(dsn = "../data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8",
verbose = FALSE)
chiTracts <- spTransform(chiTracts, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
getwd()
chiTracts <- readOGR(dsn = "~/GitHub/leaflet-trainr/data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8",
verbose = FALSE)
chiTracts <- spTransform(chiTracts, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
setwd("C:/Users/nmader/Documents/GitHub/leaflet-trainr/code")
chiTracts <- readOGR(dsn = "../data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8",
verbose = FALSE)
chiTracts <- spTransform(chiTracts, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
class(chiTracts)
save(chiTracts, "../data/chiTracts_spatialpoly")
save(chiTracts, file = "../data/chiTracts_spatialpoly")
ccas <- readOGR(dsn = "H:/GIS Projects/Chicago Boundary and Shape Files/CommAreas.shp",
layer = "CommAreas",
encoding = "UTF-8",
verbose = FALSE)
ccas <- spTransform(ccas, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
getwd()
# save(ccas, file = "../data/chicago-community-areas.Rda")
save(ccas, file = "../data/chicago-community-areas.Rda")
# First, we load the rgdal package--the R Geo-spatial Data Abstraction Library--
# which will allow us to do a variety of GIS data manipulations
library(rgdal)
# Next, we load in a shape file representing all of the Census tracts in Cook County which already has ACS data merged in, and transform it into local coordinate reference system.
# (Note: The "acs" package allows for downloading and working with ACS data directly in R. We don't use that here for the sake of space.)
chiTracts <- readOGR(dsn = "../data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8",
verbose = FALSE)
chiTracts <- spTransform(chiTracts, CRS("+proj=longlat +ellps=GRS80 +towgs84=0,0,0,0,0,0,0 +no_defs"))
#Prepare colors for symbolizing our polygon, and add it to the map
quantpal_bl <- colorQuantile(palette = "Blues", domain = NULL, n = 5)
map_wPolys <- leaflet(sch_merge) %>%
addProviderTiles("CartoDB.Positron") %>%
addPolygons(data = chiTracts,
fillColor = ~quantpal_bl(chiTracts$rEd_LtHS),
color = "#BDBDC3", weight = 0.5, fillOpacity = 0.8) %>%
addCircles(lng = ~Longitude, lat = ~Latitude, popup = ~detailedPopUp,
color = ~palette(PolicyLevel), radius = ~Totals/3, stroke = FALSE,
opacity = 0.8, fillOpacity = 0.8)
map_wPolys
?addLegend
