descvar <- gsub("_f$", "", variable)
nfocflag   <- grepl("_f$", variable)
ndesc <- ifelse(nfocflag, "n_bf", "n_bfr")
rm(variable, nfocflag)
}) %>%
dcast(as.formula(paste0(bfr_plus, " + descvar ~ ndesc")),
value.var = "value")
n_bfrv
library(data.table)
?fread
?quantile
source('~/GitHub/tcbTools/R/sample-data-gen.R', echo=TRUE)
dim(youthdata)
dim(data)
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = sample(1:10, 24, replace = TRUE),
by.var = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data <- data[order(data$ref.cat),]
# attach(data)
# desc.vars <- "val"
# ref.cat <- "ref.cat"
# by.vars <- "by.var"
# id <- "id"
dim(data)
data
data <- data[order(data$school),]
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data <- data[order(data$school),]
# attach(data)
# desc.vars <- "val"
# ref.cat <- "ref.cat"
# by.vars <- "by.var"
# id <- "id"
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
val = 1:24, #sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data
set.seed(60637)
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = 8),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = 8),
value1 = 1:24,
value2 = sample(1:10, 24, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), 24, replace = TRUE),
stringsAsFactors = FALSE)
data
n <- 24
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
data
set.seed(60637)
n <- 24
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Proc C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
data$value1[runif(n) < 0.1] <- NA
data$value2[runif(n) < 0.1] <- NA
set.seed(60637)
n <- 24
data <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Prog C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
# Add in missings
data$value1[runif(n) < 0.1] <- NA
data$value2[runif(n) < 0.1] <- NA
# Add in duplicate youth
dup <- data[c(1, 10, 20),]
dup$program <- "Prog D"
data <- rbind(data,dup)
data
### Generate data to demonstrate peerstats function ----------------------------
set.seed(60637)
n <- 24
peerdata <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Prog C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
# Add in missings
peerdata$value1[runif(n) < 0.1] <- NA
peerdata$value2[runif(n) < 0.1] <- NA
# Add in duplicate youth
dup <- peerdata[c(1, 10, 20),]
dup$program <- "Prog D"
peerdata <- rbind(peerdata,dup)
peerdata <- peerdata[order(peerdata$school),]
peerdata
### Generate data to demonstrate peerstats function ----------------------------
set.seed(60637)
n <- 24
peerdata <- data.frame(id = 1:24,
program = rep(c("Prog A", "Prog B", "Prog C"), each  = n/3),
school = rep(c("Sch 1", "Sch 2", "Sch 3"), times = n/3),
value1 = 1:n,
value2 = sample(1:10, n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sour"), n, replace = TRUE),
stringsAsFactors = FALSE)
# Add in missings
peerdata$value1[runif(n) < 0.1] <- NA
peerdata$value2[runif(n) < 0.1] <- NA
peerdata
dup <- peerdata[c(1, 10, 20),]
dup$program <- "Prog D"
peerdata <- rbind(peerdata,dup)
peerdata
peerdata <- peerdata[order(peerdata$school),]
peerdata
colnames(peerdata)
data = peerdata; descvars = c("value1", "value2"); focalcat = "program"; refcat = "school"; byvars = "flavor"; id = "id"
if ("data.table" %in% class(data)){
dt <- data
} else {
dt <- data.table(data, key = paste(focalcat, refcat, byvars, sep = ","))
}
library("data.table")
library("magrittr")
library("pastecs")
library("reshape2")
if ("data.table" %in% class(data)){
dt <- data
} else {
dt <- data.table(data, key = paste(focalcat, refcat, byvars, sep = ","))
}
head(dt)
bf  <- paste(byvars, focalcat,         sep = ",")
bfr <- paste(byvars, focalcat, refcat, sep = ",")
br  <- paste(byvars,           refcat, sep = ",")
bfr_plus <- paste(c(byvars, focalcat, refcat), collapse = " + ")
dv_plus  <- paste(descvars, collapse = " + ")
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars]
n_bfrv
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
]
n_bfrv
n_bfrv
colSums(n_bfrv)
colSums(n_bfrv$value1)
str(n_bfrv)
sum(n_bfrv$value1)
n_bfrv <- dt[,
lapply(.SD, function(dv) sum(!is.na(dv))),
by = bfr,
.SDcols = descvars][
,
paste0(descvars, "_f") := lapply(.SD, function(n_bfr) sum(n_bfr)),
by = bf,
.SDcols = descvars
] %>%
melt(id.vars = c(byvars, focalcat, refcat)) %>%
within({
descvar <- gsub("_f$", "", variable)
nfocflag   <- grepl("_f$", variable)
ndesc <- ifelse(nfocflag, "n_bf", "n_bfr")
rm(variable, nfocflag)
}) %>%
dcast(as.formula(paste0(bfr_plus, " + descvar ~ ndesc")),
value.var = "value")
n_bfrv
library(data.table)
n <- 1e8
dt_n1e8 <- data.table(clef   = sample(c("treble", "bass"), size = n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sweet"), size = n, replace = TRUE),
value = rnorm(n))
dtk_n1e8 <- setkey(dt_n1e8, "clef", "flavor")
system.time( dt_n1e8[, mean(value)])
system.time( dt_n1e8[, mean(value), by = "clef"])
system.time( dt_n1e8[, mean(value), by = "clef,flavor"])
system.time(dtk_n1e8[, mean(value), by = "clef,flavor"])
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
dt <- dt_n1e8[sample(1:n, size = size)]
runtime <- system.time(for (b in 1:10) (dt[, mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(runtime ~ size + I(size^2), data = runtimes_byn)
?I
lm(time ~ size + I(size^2), data = runtimes_byn)
rm(list = ls())
gc()
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
runtime <- system.time((dt[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
runtimes_byn
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
runtime <- system.time((dtk_n1e8[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
library(data.table)
# Set up data sets
n <- 1e8
dt_n1e8 <- data.table(clef   = sample(c("treble", "bass"), size = n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sweet"), size = n, replace = TRUE),
value = rnorm(n))
dtk_n1e8 <- setkey(dt_n1e8, "clef", "flavor")
# Compare run time by # of bys, and setkey
system.time( dt_n1e8[, mean(value)])
system.time( dt_n1e8[, mean(value), by = "clef"])
system.time( dt_n1e8[, mean(value), by = "clef,flavor"])
system.time(dtk_n1e8[, mean(value), by = "clef,flavor"])
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e8)){
print(paste("Running loop for size", size))
runtime <- system.time((dtk_n1e8[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
runtimes_byn
library(data.table)
# Set up data sets
n <- 1e7
dt_n1e7 <- data.table(clef   = sample(c("treble", "bass"), size = n, replace = TRUE),
flavor = sample(c("sweet", "salty", "bitter", "sweet"), size = n, replace = TRUE),
value = rnorm(n))
dtk_n1e7 <- setkey(dt_n1e7, "clef", "flavor")
# Compare run time by # of bys, and setkey
system.time( dt_n1e7[, mean(value)])
system.time( dt_n1e7[, mean(value), by = "clef"])
system.time( dt_n1e7[, mean(value), by = "clef,flavor"])
system.time(dtk_n1e7[, mean(value), by = "clef,flavor"])
# Compare run times by n
runtimes_byn <- NULL
for (size in c(1e2, 1e3, 1e4, 1e5, 1e6, 1e7, 1e7)){
print(paste("Running loop for size", size))
runtime <- system.time(for (b in 1:100) (dtk_n1e7[sample(1:n, size = size), mean(value), by = "clef,flavor"]))["elapsed"]
runtimes_byn <- rbind(runtimes_byn, data.frame(size = size, time = runtime))
}
with(runtimes_byn, plot(x = size, time = runtime))
lm(time ~ size + I(size^2), data = runtimes_byn)
getwd()
library(leaflet)
library(readxl)
install.packages("webshot")
head(WorldPhones)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot <- renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
library(shiny)
shinyApp(
ui = fluidPage(
selectInput("region", "Region:",
choices = colnames(WorldPhones)),
plotOutput("phonePlot")
),
server = function(input, output) {
output$phonePlot <- renderPlot({
barplot(WorldPhones[,input$region]*1000,
ylab = "Number of Telephones", xlab = "Year")
})
},
options = list(height = 500)
)
chiTracts <- readOGR(dsn = "../data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8")
library(rgdal)
getwd()
chiTracts <- readOGR(dsn = "../data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8")
setwd("~/GitHub/leaflet-trainr/code")
chiTracts <- readOGR(dsn = "../data/CensusTracts_acsMerge.shp",
layer = "CensusTracts_acsMerge",
encoding = "UTF-8")
?readOGR
schools <- read.csv("https://data.cityofchicago.org/api/views/2m8w-izji/rows.csv",
stringsAsFactors = FALSE) %>%
within({
temp <- Latitude
Latitude <- Longitude # ...because these are accidentally backwards
Longitude <- temp
PolicyLevel <- factor(CPS.Performance.Policy.Level)
rm(temp)
})
# Download and merge an Excel file with enrollment data
download.file(url = "http://cps.edu/Performance/Documents/Datafiles/enrollment_20th_day_2014.xls",
destfile = "sch_enrollment_xls.xls", method = "curl")
sch_enrollment <- read_excel("sch_enrollment_xls.xls")
sch_merge <- merge(x = schools,
y = sch_enrollment,
by.x = "School.ID",
by.y = "School ID")
library(readxl)
schools <- read.csv("https://data.cityofchicago.org/api/views/2m8w-izji/rows.csv",
stringsAsFactors = FALSE) %>%
within({
temp <- Latitude
Latitude <- Longitude # ...because these are accidentally backwards
Longitude <- temp
PolicyLevel <- factor(CPS.Performance.Policy.Level)
rm(temp)
})
# Download and merge an Excel file with enrollment data
download.file(url = "http://cps.edu/Performance/Documents/Datafiles/enrollment_20th_day_2014.xls",
destfile = "sch_enrollment_xls.xls", method = "curl")
sch_enrollment <- read_excel("sch_enrollment_xls.xls")
sch_merge <- merge(x = schools,
y = sch_enrollment,
by.x = "School.ID",
by.y = "School ID")
library(magrittr)
schools <- read.csv("https://data.cityofchicago.org/api/views/2m8w-izji/rows.csv",
stringsAsFactors = FALSE) %>%
within({
temp <- Latitude
Latitude <- Longitude # ...because these are accidentally backwards
Longitude <- temp
PolicyLevel <- factor(CPS.Performance.Policy.Level)
rm(temp)
})
# Download and merge an Excel file with enrollment data
download.file(url = "http://cps.edu/Performance/Documents/Datafiles/enrollment_20th_day_2014.xls",
destfile = "sch_enrollment_xls.xls", method = "curl")
sch_enrollment <- read_excel("sch_enrollment_xls.xls")
sch_merge <- merge(x = schools,
y = sch_enrollment,
by.x = "School.ID",
by.y = "School ID")
colnames(sch_merge)
View(sch_merge)
table(sch_merge$Network)
table(sch_merge$CPS.Performance.Policy.Status)
table(sch_merge$CPS.Performance.Policy.Level)
colnames(sch_merge)
summary(sch_merge$Student.Response.Rate)
summary(as.numeric(sch_merge$Student.Response.Rate))
summary(as.numeric(gsub("%", "", sch_merge$Student.Response.Rate))/100)
head(colnames(sch_merge))
head(colnames(sch_merge), 10)
ui <- fluidPage({
inputPanel(
checkboxGroupInput(inputId = "myLevels",
label = ("School Levels to Include"),
choices = levelValues,
select  = levelValues),
selectInput(inputId = "symbolizeField",
label = "Choose 5Essentials Rating to Visualie:",
choices = c("Involved Family", "Supportive Environment", "Ambitious Instruction",
"Effective Leaders", "Collaborative Teachers", "Safe", "School Community",
"Parent Teacher Partnership", "Quality of Facilities"),
selected = "Involved Family"),
sliderInput(inputId = "minResponse",
label = "Minimum Response Rate:",
min = 0.0, max = 1.0, value = 0.0, step = 0.05),
leafletOutput("schMap")
)
})
server <- function(input, output){
mySchs <- reactive(subset(sch_merge,
subset = CPS.Performance.Policy.Level %in% input$myLevels &
as.numeric(gsub("%", "", Student.Response.Rate ))/100 >= input$minResponse))
symbField <- reactive(with(mySchs(), get(gsub(" ", "\\.", input$symbolizeField))))
myPalette <- reactive(colorFactor(palette = "Set1",
domain = symbField()))
#head(mySchs()[, c("Name.of.School", "CPS.Performance.Policy.Level", "Student.Response.Rate")])
renderLeaflet({
leaflet(mySchs()) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(lng = ~Longitude, lat = ~Latitude, popup = ~Name.of.School,
color = ~myPalette()(symbField()), radius = ~Totals/3, stroke = FALSE,
opacity = 0.8, fillOpacity = 0.8)
# %>%
#   addLegend(position = "bottomright", pal = myPalette, values = ~symbField(),
#             title = "CPS School Policy Levels")
})
}
shinyApp(ui, server)
levelValues <- sort(unique(sch_merge$CPS.Performance.Policy.Level))
ui <- fluidPage({
inputPanel(
checkboxGroupInput(inputId = "myLevels",
label = ("School Levels to Include"),
choices = levelValues,
select  = levelValues),
selectInput(inputId = "symbolizeField",
label = "Choose 5Essentials Rating to Visualie:",
choices = c("Involved Family", "Supportive Environment", "Ambitious Instruction",
"Effective Leaders", "Collaborative Teachers", "Safe", "School Community",
"Parent Teacher Partnership", "Quality of Facilities"),
selected = "Involved Family"),
sliderInput(inputId = "minResponse",
label = "Minimum Response Rate:",
min = 0.0, max = 1.0, value = 0.0, step = 0.05),
leafletOutput("schMap")
)
})
server <- function(input, output){
mySchs <- reactive(subset(sch_merge,
subset = CPS.Performance.Policy.Level %in% input$myLevels &
as.numeric(gsub("%", "", Student.Response.Rate ))/100 >= input$minResponse))
symbField <- reactive(with(mySchs(), get(gsub(" ", "\\.", input$symbolizeField))))
myPalette <- reactive(colorFactor(palette = "Set1",
domain = symbField()))
#head(mySchs()[, c("Name.of.School", "CPS.Performance.Policy.Level", "Student.Response.Rate")])
renderLeaflet({
leaflet(mySchs()) %>%
addProviderTiles("CartoDB.Positron") %>%
addCircles(lng = ~Longitude, lat = ~Latitude, popup = ~Name.of.School,
color = ~myPalette()(symbField()), radius = ~Totals/3, stroke = FALSE,
opacity = 0.8, fillOpacity = 0.8)
# %>%
#   addLegend(position = "bottomright", pal = myPalette, values = ~symbField(),
#             title = "CPS School Policy Levels")
})
}
shinyApp(ui, server)
?colorFactor
library(leaflet)
?colorFactor
table(sch_merge$My.Voice..My.School.Overall.Rating)
str(sch_merge)
table(sch_merge$Effective.Leaders)
?colorRamp
?colorFactor
myPalette
myPalette <- colorFactor(palette = "Blues",
domain = c("NOT ENOUGH DATA", "VERY WEAK", "WEAK",
"NEUTRAL", "STRONG", "VERY STRONG"),
ordered = TRUE)
myPalette
?addLegend
table(sch_merge$Network)
setwd("~/GitHub/leaflet-trainr")
library(readxl)
head(sch_merge)
## School 5Essentials Explorer for `r myNetwork` Schools
?rmarkdown::render
source('~/GitHub/leaflet-trainr/code/generate-multiple-reports.R', echo=TRUE)
source('~/GitHub/leaflet-trainr/code/generate-multiple-reports.R', echo=TRUE)
source('~/GitHub/leaflet-trainr/code/generate-multiple-reports.R', echo=TRUE)
source('~/GitHub/leaflet-trainr/code/generate-multiple-reports.R', echo=TRUE)
source('~/GitHub/leaflet-trainr/code/generate-multiple-reports.R', echo=TRUE)
library(markdown)
library(rmarkdown)
rmarkdown::render(input = "code/demo-of-shiny-and-leaflet.Rmd",
output_format = "html_document",
output_file = "School-explorer-5Essentials.html",
output_dir = "output",
runtime = "shiny")
source('~/GitHub/leaflet-trainr/code/generate-multiple-reports.R', echo=TRUE)
source('~/GitHub/leaflet-trainr/code/generate-multiple-reports.R', echo=TRUE)
